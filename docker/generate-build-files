#!/usr/bin/env python3
import os

import jinja2


def main():
    basedir = os.path.dirname(__file__)
    with open(os.path.join(basedir, "Dockerfile.j2")) as fp:
        template = jinja2.Template(fp.read(), keep_trailing_newline=True)
    arches = (
        ("aarch64", "aarch64-unknown-linux-gnu"),
        ("i686", "i686-unknown-linux-gnu"),
        ("ppc64le", "powerpc64le-unknown-linux-gnu"),
        ("s390x", "s390x-ibm-linux-gnu"),
        ("x86_64", "x86_64-unknown-linux-gnu"),
    )
    pythons = (
        ("3.6", "cp36-cp36m", "v3.6.15", ("--with-pymalloc",), "python3.6m"),
        ("3.7", "cp37-cp37m", "v3.7.17", ("--with-pymalloc",), "python3.7m"),
        ("3.8", "cp38-cp38", "v3.8.19", (), "python3.8"),
    )
    with open(os.path.join(basedir, "image", "Dockerfile"), "w") as fp:
        fp.write(template.render(arches=arches, pythons=pythons))
    for arch, triple in arches:
        user_config_dir = os.path.join(
            basedir, "image", "boost", arch, "tools", "build", "src"
        )
        os.makedirs(user_config_dir, exist_ok=True)
        user_config = os.path.join(user_config_dir, "user-config.jam")
        with open(user_config, "w") as fp:
            fp.write("using gcc")
            fp.write(" : {}".format(arch))
            fp.write(" : {}-g++".format(triple))
            fp.write(" ;\n")
            for version, name_tag, _, _, includes in pythons:
                fp.write("using python")
                # version
                fp.write(" : {}".format(version))
                # cmd-or-prefix
                fp.write(" : /usr/{}/{}/bin/python3".format(triple, name_tag))
                # includes
                fp.write(" : /usr/{}/{}/include/{}".format(triple, name_tag, includes)),
                # libraries
                fp.write(" : /usr/{}/{}/lib".format(triple, name_tag))
                fp.write(" ;\n")


if __name__ == "__main__":
    main()
