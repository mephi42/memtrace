#!/usr/bin/env python3
from configparser import ConfigParser
import os
import shlex

import jinja2

ARCH_PREFIX = "arch."
COMMIT_PREFIX = "commit."
PYTHON_PREFIX = "python."


def main():
    basedir = os.path.dirname(__file__)
    with open(os.path.join(basedir, "Dockerfile.j2")) as fp:
        template = jinja2.Template(fp.read(), keep_trailing_newline=True)
    arches = []
    commits = {}
    pythons = []
    config = ConfigParser()
    config.read(os.path.join(basedir, "images.ini"))
    for section_name in config.sections():
        section = config[section_name]
        if section_name.startswith(ARCH_PREFIX):
            arch = section_name[len(ARCH_PREFIX) :]
            arches.append((arch, section["triple"]))
        elif section_name.startswith(COMMIT_PREFIX):
            commits[section_name[len(COMMIT_PREFIX) :]] = section["id"]
        elif section_name.startswith(PYTHON_PREFIX):
            pythons.append(
                (
                    section_name[len(PYTHON_PREFIX) :],
                    section["name_tag"],
                    section["git_tag"],
                    shlex.split(section.get("configure_flags", "")),
                    section["includes"],
                    [
                        commits[commit_name]
                        for commit_name in section.get("commits", "").split()
                    ],
                )
            )
        else:
            raise RuntimeError("Unsupported section: {}".format(section_name))
    with open(os.path.join(basedir, "image", "Dockerfile"), "w") as fp:
        fp.write(template.render(arches=arches, pythons=pythons))
    for arch, triple in arches:
        user_config_dir = os.path.join(
            basedir, "image", "boost", arch, "tools", "build", "src"
        )
        os.makedirs(user_config_dir, exist_ok=True)
        user_config = os.path.join(user_config_dir, "user-config.jam")
        with open(user_config, "w") as fp:
            fp.write("using gcc")
            fp.write(" : {}".format(arch))
            fp.write(" : {}-g++".format(triple))
            fp.write(" ;\n")
            for version, name_tag, _, _, includes, _ in pythons:
                fp.write("using python")
                # version
                fp.write(" : {}".format(version))
                # cmd-or-prefix
                fp.write(" : /usr/{}/{}/bin/python3".format(triple, name_tag))
                # includes
                fp.write(" : /usr/{}/{}/include/{}".format(triple, name_tag, includes)),
                # libraries
                fp.write(" : /usr/{}/{}/lib".format(triple, name_tag))
                fp.write(" ;\n")


if __name__ == "__main__":
    main()
