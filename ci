#!/usr/bin/env python3
import argparse
import os
import platform
import subprocess
import tempfile

basedir = os.path.dirname(os.path.realpath(__file__))
uname_m = platform.machine()
uname = f"{platform.system()}-{uname_m}"
build = os.path.join(basedir, "build", uname)
run_in_venv = os.path.join(basedir, "run-in-venv")


def get_python_version(python):
    hexversion = int(
        subprocess.check_output([python, "-c", "import sys; print(sys.hexversion)"])
    )
    return "{}.{}.{}".format(
        (hexversion >> 24) & 0xFF,
        (hexversion >> 16) & 0xFF,
        (hexversion >> 8) & 0xFF,
    )


def setup_build_venv(python):
    venv = os.path.join(build, get_python_version(python))
    subprocess.check_call([python, "-m", "venv", venv])
    subprocess.check_call(
        [
            run_in_venv,
            venv,
            "pip",
            "install",
            "--disable-pip-version-check",
            "--requirement=requirements.txt",
            "--upgrade",
        ],
        cwd=basedir,
    )
    return venv


def repair_wheel(venv, whl, wheel_dir):
    with tempfile.TemporaryDirectory(dir=wheel_dir) as tmp_wheel_dir:
        subprocess.check_call(
            [
                run_in_venv,
                venv,
                "auditwheel",
                "repair",
                "--plat=manylinux2014_x86_64",
                f"--wheel-dir={tmp_wheel_dir}",
                whl,
            ]
        )
        (tmp_manylinux_whl_name,) = os.listdir(tmp_wheel_dir)
        manylinux_whl = os.path.join(wheel_dir, tmp_manylinux_whl_name)
        os.rename(
            os.path.join(tmp_wheel_dir, tmp_manylinux_whl_name),
            manylinux_whl,
        )
        return manylinux_whl


def build_wheel(venv, build_type, build_args, wheel_dir, skip_repair):
    with tempfile.TemporaryDirectory() as dist_dir:
        subprocess.check_call(
            [
                run_in_venv,
                venv,
                "python",
                "setup.py",
                "bdist_wheel",
                f"--build-type={build_type}",
                f"--dist-dir={dist_dir}",
                *build_args,
            ],
            cwd=basedir,
        )
        (whl_name,) = os.listdir(dist_dir)
        whl = os.path.join(dist_dir, whl_name)
        os.makedirs(wheel_dir, exist_ok=True)
        if skip_repair:
            result = os.path.join(wheel_dir, whl_name)
            os.rename(whl, result)
            return result
        else:
            return repair_wheel(venv, whl, wheel_dir)


def git_ls_files():
    p = subprocess.Popen(["git", "ls-files"], stdout=subprocess.PIPE)
    try:
        for line in p.stdout:
            yield line.strip().decode()
    finally:
        if p.wait() != 0:
            raise subprocess.CalledProcessError(p.returncode, p.args)


def git_ls_py_files():
    for path in git_ls_files():
        if path.endswith(".py"):
            yield path
        else:
            try:
                with open(path, "rb") as fp:
                    if (
                        fp.read(2) == b"#!"
                        and fp.readline() == b"/usr/bin/env python3\n"
                    ):
                        yield path
            except (FileNotFoundError, IsADirectoryError):
                pass


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--build-type", default="Release")
    parser.add_argument("--python", action="append")
    parser.add_argument("--skip-tests", action="store_true")
    parser.add_argument("--skip-repair", action="store_true")
    parser.add_argument(
        "--wheel-dir",
        default=os.path.join(basedir, "dist", "wheelhouse"),
    )
    args, build_args = parser.parse_known_args()
    if args.python is None:
        args.python = ("python3",)
    for python in args.python:
        venv = setup_build_venv(python)
        subprocess.check_call(
            [
                run_in_venv,
                venv,
                "flake8",
            ]
            + list(git_ls_py_files()),
            cwd=basedir,
        )
        if not args.skip_tests:
            subprocess.check_call(
                [
                    run_in_venv,
                    venv,
                    "python",
                    "setup.py",
                    "build",
                    f"--build-type={args.build_type}",
                    *build_args,
                ],
                cwd=basedir,
            )
            subprocess.check_call(
                [run_in_venv, venv, "python", "-m", "unittest", "discover"]
            )
        build_wheel(venv, args.build_type, build_args, args.wheel_dir, args.skip_repair)


if __name__ == "__main__":
    main()
